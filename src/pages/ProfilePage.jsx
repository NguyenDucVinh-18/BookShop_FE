import React, { useContext, useEffect, useState } from "react";
import {
  Button,
  Form,
  Input,
  Upload,
  Tabs,
  Avatar,
  Tag,
  Card,
  List,
  Space,
  Typography,
  Divider,
  Modal,
  message,
  Popconfirm,
  Radio,
} from "antd";
import "../styles/ProfilePage.css";
import {
  UploadOutlined,
  ShoppingCartOutlined,
  ClockCircleOutlined,
  CarOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  PlusOutlined,
  EnvironmentOutlined,
  DeleteOutlined,
  ExclamationCircleOutlined,
  WarningOutlined,
} from "@ant-design/icons";
import { AuthContext } from "../components/context/auth.context";
import {
  addAddress,
  changePasswordAPI,
  deleteAddress,
  getAddresses,
  updateAddress,
  updateAvatarAPI,
  updateInFo,
} from "../service/user.service";
import { useNavigate } from "react-router-dom";
import { cancelOrderAPI, getAllOrderAPI } from "../service/order.service";
import axios from "axios";

const { Text, Title } = Typography;
const PROFILE_KEY = "userProfile";

// H√†m helper ƒë·ªÉ l·∫•y icon tr·∫°ng th√°i ƒë∆°n h√†ng
const getStatusIcon = (status) => {
  switch (status) {
    case "UNPAID":
      return <WarningOutlined style={{ color: "#fa541c" }} />;
    case "PENDING":
      return <ClockCircleOutlined style={{ color: "#faad14" }} />;
    case "processing":
      return <ShoppingCartOutlined style={{ color: "#1890ff" }} />;
    case "SHIPPING":
      return <CarOutlined style={{ color: "#722ed1" }} />;
    case "DELIVERED":
      return <CheckCircleOutlined style={{ color: "#52c41a" }} />;
    case "CANCELED":
      return <CloseCircleOutlined style={{ color: "#ff4d4f" }} />;
    default:
      return <ClockCircleOutlined />;
  }
};

// H√†m helper ƒë·ªÉ l·∫•y m√†u tr·∫°ng th√°i ƒë∆°n h√†ng
const getStatusColor = (status) => {
  switch (status) {
    case "UNPAID":
      return "orange";
    case "PENDING":
      return "warning";
    case "processing":
      return "processing";
    case "SHIPPING":
      return "purple";
    case "DELIVERED":
      return "success";
    case "CANCELED":
      return "error";
    default:
      return "default";
  }
};

const defaultProfile = {
  username: "",
  email: "",
  phone: "",
  avatar: "",
};

// Component hi·ªÉn th·ªã ƒë∆°n h√†ng
const OrderItem = ({ order, onOrderClick }) => {
  return (
    <Card
      style={{ marginBottom: 16, borderRadius: 8, cursor: "pointer" }}
      bodyStyle={{ padding: 16 }}
      onClick={() => onOrderClick(order)}
      hoverable
    >
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "flex-start",
          marginBottom: 16,
        }}
      >
        <div>
          <Text strong>M√£ ƒë∆°n h√†ng: {order.id}</Text>
          <br />
          Ng√†y ƒë·∫∑t: {new Date(order?.createdAt).toLocaleString("vi-VN")}
        </div>
        <div style={{ textAlign: "right" }}>
          <Tag
            color={getStatusColor(order.status)}
            icon={getStatusIcon(order.status)}
          >
            {order.status}
          </Tag>
          <br />
          <Text strong style={{ fontSize: 16, color: "#1890ff" }}>
            {order.totalAmount.toLocaleString("vi-VN")} ‚Ç´
          </Text>
        </div>
      </div>

      <Divider style={{ margin: "12px 0" }} />

      <List
        dataSource={order.orderItems}
        renderItem={(item) => (
          <List.Item style={{ padding: "8px 0" }}>
            <div
              style={{ display: "flex", alignItems: "center", width: "100%" }}
            >
              <img
                src={item.productImage}
                alt={item.productName}
                style={{
                  width: 60,
                  height: 80,
                  objectFit: "cover",
                  marginRight: 12,
                  borderRadius: 4,
                }}
              />
              <div style={{ flex: 1 }}>
                <Text strong>{item.productName}</Text>
                <br />
                <Text type="secondary">
                  {item.price.toLocaleString("vi-VN")} ‚Ç´ x {item.quantity}
                </Text>
              </div>
            </div>
          </List.Item>
        )}
      />

      <div style={{ textAlign: "center", marginTop: 16 }}>
        <Text type="secondary" style={{ fontSize: 12 }}>
          üëÜ Click ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng
        </Text>
      </div>
    </Card>
  );
};

// Component hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
const OrdersTab = () => {
  const [selectedStatus, setSelectedStatus] = useState("all");
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isOrderModalVisible, setIsOrderModalVisible] = useState(false);
  const { user, setUser } = useContext(AuthContext);

  const [isCancelModalVisible, setIsCancelModalVisible] = useState(false);
  const [selectedCancelReason, setSelectedCancelReason] = useState("");
  const [customCancelReason, setCustomCancelReason] = useState("");

  const [notification, setNotification] = useState({
    type: "",
    message: "",
    visible: false,
  });

  const showNotification = (type, message) => {
    setNotification({ type, message, visible: true });
    // T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
    setTimeout(() => {
      setNotification({ type: "", message: "", visible: false });
    }, 3000);
  };

  // Danh s√°ch l√Ω do h·ªßy ƒë∆°n h√†ng
  const cancelReasons = [
    { value: "change_product", label: "üîÑ Mu·ªën ƒë·ªïi s·∫£n ph·∫©m kh√°c" },
    { value: "change_address", label: "üìç Mu·ªën ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng" },
    { value: "change_payment", label: "üí≥ Mu·ªën ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n" },
    { value: "price_change", label: "üí∞ T√¨m th·∫•y gi√° t·ªët h∆°n ·ªü n∆°i kh√°c" },
    { value: "no_longer_need", label: "üö´ Kh√¥ng c√≤n c·∫ßn s·∫£n ph·∫©m" },
    { value: "other", label: "üìù L√Ω do kh√°c" },
  ];

  // H√†m x·ª≠ l√Ω m·ªü modal ch·ªçn l√Ω do h·ªßy
  const handleShowCancelModal = (orderId) => {
    setIsCancelModalVisible(true);
    setSelectedCancelReason("");
    setCustomCancelReason("");
  };

  // H√†m x·ª≠ l√Ω ƒë√≥ng modal ch·ªçn l√Ω do h·ªßy
  const handleCloseCancelModal = () => {
    setIsCancelModalVisible(false);
    setSelectedCancelReason("");
    setCustomCancelReason("");
  };

  const loadOrders = async () => {
    try {
      const ordersData = await getAllOrderAPI();
      if (ordersData.status === "success") {
        setOrders(ordersData.data || []);
      } else {
        setOrders([]);
      }
    } catch (error) {
      console.error("Error loading orders:", error);
    }
  };

  useEffect(() => {
    loadOrders();
  }, []);

  const statusOptions = [
    { value: "all", label: "T·∫•t c·∫£", count: orders.length },
    {
      value: "UNPAID",
      label: "Ch∆∞a thanh to√°n",
      count: orders.filter((o) => o.status === "UNPAID").length,
    },
    {
      value: "PENDING",
      label: "ƒêang x·ª≠ l√Ω",
      count: orders.filter((o) => o.status === "PENDING").length,
    },
    {
      value: "SHIPPING",
      label: "ƒêang giao",
      count: orders.filter((o) => o.status === "SHIPPING").length,
    },
    {
      value: "DELIVERED",
      label: "ƒê√£ giao",
      count: orders.filter((o) => o.status === "DELIVERED").length,
    },
    {
      value: "CANCELED",
      label: "ƒê√£ h·ªßy",
      count: orders.filter((o) => o.status === "CANCELED").length,
    },
  ];

  const filteredOrders =
    selectedStatus === "all"
      ? orders
      : orders.filter((order) => order.status === selectedStatus);

  // X·ª≠ l√Ω click v√†o ƒë∆°n h√†ng ƒë·ªÉ hi·ªÉn th·ªã modal
  const handleOrderClick = (order) => {
    setSelectedOrder(order);
    setIsOrderModalVisible(true);
  };

  // X·ª≠ l√Ω ƒë√≥ng modal
  const handleCloseOrderModal = () => {
    setIsOrderModalVisible(false);
    setSelectedOrder(null);
  };

  const handleConfirmCancel = async () => {
    if (!selectedCancelReason) {
      showNotification("warning", "Vui l√≤ng ch·ªçn l√Ω do h·ªßy ƒë∆°n h√†ng");
      return;
    }

    if (selectedCancelReason === "other" && !customCancelReason.trim()) {
      showNotification("warning", "Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng");
      return;
    }

    try {
      const reason =
        selectedCancelReason === "other"
          ? customCancelReason
          : cancelReasons.find((r) => r.value === selectedCancelReason)?.label;

      // G·ªçi API h·ªßy ƒë∆°n h√†ng v·ªõi l√Ω do
      const resCancelOrder = await cancelOrderAPI(selectedOrder.id, reason);
      if (resCancelOrder.status === "success") {
        showNotification("success", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng");
        handleCloseCancelModal();
        handleCloseOrderModal();
      } else {
        showNotification(
          "error",
          resCancelOrder.message || "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i"
        );
      }

      loadOrders();
    } catch (error) {
      showNotification("error", "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i");
    }
  };

  return (
    <div>
      {/* Notification System */}
      {notification.visible && (
        <div
          className={`notification ${notification.type}`}
          style={{
            position: "fixed",
            top: "20px",
            right: "20px",
            padding: "16px 24px",
            borderRadius: "8px",
            color: "white",
            fontWeight: "bold",
            zIndex: 9999,
            boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
            backgroundColor:
              notification.type === "success"
                ? "#52c41a"
                : notification.type === "error"
                ? "#ff4d4f"
                : "#1890ff",
          }}
        >
          {notification.message}
        </div>
      )}
      <div style={{ marginBottom: 24 }}>
        <Title level={4} style={{ marginBottom: 16 }}>
          Theo d√µi ƒë∆°n h√†ng
        </Title>
        <Space wrap>
          {statusOptions.map((option) => (
            <Button
              key={option.value}
              type={selectedStatus === option.value ? "primary" : "default"}
              onClick={() => setSelectedStatus(option.value)}
              style={{ borderRadius: 20 }}
            >
              {option.label} ({option.count})
            </Button>
          ))}
        </Space>
      </div>

      {filteredOrders.length === 0 ? (
        <div style={{ textAlign: "center", padding: "40px 20px" }}>
          <ShoppingCartOutlined
            style={{ fontSize: 48, color: "#d9d9d9", marginBottom: 16 }}
          />
          <br />
          <Text type="secondary">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o</Text>
        </div>
      ) : (
        <div>
          {filteredOrders.map((order) => (
            <OrderItem
              key={order.id}
              order={order}
              onOrderClick={handleOrderClick}
            />
          ))}
        </div>
      )}

      {/* Modal chi ti·∫øt ƒë∆°n h√†ng */}
      <Modal
        title={
          <div style={{ textAlign: "center" }}>
            <h3 style={{ margin: 0, color: "#1890ff", fontSize: "20px" }}>
              üìã Chi ti·∫øt ƒë∆°n h√†ng #{selectedOrder?.id}
            </h3>
          </div>
        }
        open={isOrderModalVisible}
        onCancel={handleCloseOrderModal}
        footer={null}
        width={900}
        centered
      >
        {selectedOrder && (
          <div style={{ maxHeight: "70vh", overflowY: "auto", padding: "8px" }}>
            {/* Header ƒë∆°n h√†ng */}
            <div
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                padding: "24px",
                borderRadius: "12px",
                marginBottom: "24px",
                color: "white",
              }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  flexWrap: "wrap",
                  gap: "16px",
                }}
              >
                <div>
                  <div
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      marginBottom: "8px",
                    }}
                  >
                    üìÖ{" "}
                    {new Date(selectedOrder.createdAt).toLocaleDateString(
                      "vi-VN"
                    )}{" "}
                    ‚Ä¢ üïê{" "}
                    {new Date(selectedOrder.createdAt).toLocaleTimeString(
                      "vi-VN"
                    )}
                  </div>
                </div>
                <div style={{ textAlign: "right" }}>
                  <Tag
                    color={getStatusColor(selectedOrder.status)}
                    icon={getStatusIcon(selectedOrder.status)}
                    style={{
                      fontSize: "14px",
                      padding: "8px 16px",
                      marginBottom: "8px",
                    }}
                  >
                    {selectedOrder.status}
                  </Tag>
                  <div style={{ fontSize: "24px", fontWeight: "bold" }}>
                    {selectedOrder.totalAmount.toLocaleString("vi-VN")} ‚Ç´
                  </div>
                </div>
              </div>
            </div>

            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: "24px",
                marginBottom: "24px",
              }}
            >
              {/* Th√¥ng tin kh√°ch h√†ng */}
              <div
                style={{
                  background: "#fff",
                  padding: "20px",
                  borderRadius: "12px",
                  border: "1px solid #e8e8e8",
                  boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
                }}
              >
                <h4
                  style={{
                    color: "#1890ff",
                    marginBottom: "16px",
                    fontSize: "16px",
                  }}
                >
                  üë§ Th√¥ng tin kh√°ch h√†ng
                </h4>
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "12px",
                  }}
                >
                  <div>
                    <Text
                      type="secondary"
                      style={{ fontSize: "12px", display: "block" }}
                    >
                      H·ªç v√† t√™n
                    </Text>
                    <Text strong style={{ fontSize: "14px" }}>
                      {user.username || "Ch∆∞a c√≥ th√¥ng tin"}
                    </Text>
                  </div>
                  <div>
                    <Text
                      type="secondary"
                      style={{ fontSize: "12px", display: "block" }}
                    >
                      S·ªë ƒëi·ªán tho·∫°i
                    </Text>
                    <Text strong style={{ fontSize: "14px" }}>
                      {selectedOrder.phone || "Ch∆∞a c√≥ th√¥ng tin"}
                    </Text>
                  </div>
                  <div>
                    <Text
                      type="secondary"
                      style={{ fontSize: "12px", display: "block" }}
                    >
                      Email
                    </Text>
                    <Text strong style={{ fontSize: "14px" }}>
                      {user.email || "Ch∆∞a c√≥ th√¥ng tin"}
                    </Text>
                  </div>
                  <div>
                    <Text
                      type="secondary"
                      style={{ fontSize: "12px", display: "block" }}
                    >
                      ƒê·ªãa ch·ªâ giao h√†ng
                    </Text>
                    <Text strong style={{ fontSize: "14px" }}>
                      {selectedOrder.address || "Ch∆∞a c√≥ th√¥ng tin"}
                    </Text>
                  </div>
                </div>
              </div>

              {/* Thanh to√°n & H√†nh ƒë·ªông ho·∫∑c Th√¥ng tin h·ªßy */}
              <div
                style={{
                  background: "#fff",
                  padding: "20px",
                  borderRadius: "12px",
                  border: "1px solid #e8e8e8",
                  boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
                }}
              >
                {/* N·∫øu ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy, hi·ªÉn th·ªã th√¥ng tin h·ªßy */}
                {selectedOrder.status === "CANCELED" ? (
                  <>
                    <h4
                      style={{
                        color: "#ff4d4f",
                        marginBottom: "16px",
                        fontSize: "16px",
                      }}
                    >
                      ‚ùå Th√¥ng tin h·ªßy ƒë∆°n
                    </h4>

                    <div
                      style={{
                        background: "#fff2f0",
                        padding: "16px",
                        borderRadius: "8px",
                        border: "1px solid #ffccc7",
                        marginBottom: "16px",
                      }}
                    >
                      <div style={{ marginBottom: "12px" }}>
                        <Text
                          type="secondary"
                          style={{ fontSize: "12px", display: "block" }}
                        >
                          Th·ªùi gian h·ªßy
                        </Text>
                        <Text
                          strong
                          style={{ fontSize: "14px", color: "#ff4d4f" }}
                        >
                          üïê{" "}
                          {selectedOrder.cancelledAt
                            ? new Date(
                                selectedOrder.cancelledAt
                              ).toLocaleDateString("vi-VN") +
                              " ‚Ä¢ " +
                              new Date(
                                selectedOrder.cancelledAt
                              ).toLocaleTimeString("vi-VN")
                            : "Kh√¥ng c√≥ th√¥ng tin"}
                        </Text>
                      </div>

                      <div>
                        <Text
                          type="secondary"
                          style={{ fontSize: "12px", display: "block" }}
                        >
                          L√Ω do h·ªßy
                        </Text>
                        <Text strong style={{ fontSize: "14px" }}>
                          {selectedOrder.cancelReason ||
                            "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ"}
                        </Text>
                      </div>
                    </div>

                    {/* Th√¥ng tin ho√†n ti·ªÅn n·∫øu ƒë√£ thanh to√°n */}
                    {selectedOrder.paymentMethod === "BANKING" &&
                      selectedOrder.paymentStatus === "PAID" && (
                        <div
                          style={{
                            background: "#f6ffed",
                            padding: "12px",
                            borderRadius: "8px",
                            border: "1px solid #b7eb8f",
                            display: "flex",
                            alignItems: "center",
                            gap: "8px",
                          }}
                        >
                          <span style={{ fontSize: "16px" }}>üí∞</span>
                          <div>
                            <Text
                              style={{ fontSize: "14px", color: "#52c41a" }}
                            >
                              <strong>Tr·∫°ng th√°i ho√†n ti·ªÅn:</strong>
                            </Text>
                            <br />
                            <Text
                              style={{ fontSize: "13px", color: "#52c41a" }}
                            >
                              {selectedOrder.refundStatus === "COMPLETED"
                                ? "‚úÖ ƒê√£ ho√†n ti·ªÅn th√†nh c√¥ng"
                                : selectedOrder.refundStatus === "PROCESSING"
                                ? "‚è≥ ƒêang x·ª≠ l√Ω ho√†n ti·ªÅn"
                                : "üìã S·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn trong 3-7 ng√†y l√†m vi·ªác"}
                            </Text>
                          </div>
                        </div>
                      )}
                  </>
                ) : (
                  /* N·∫øu ch∆∞a h·ªßy, hi·ªÉn th·ªã th√¥ng tin thanh to√°n & h√†nh ƒë·ªông */
                  <>
                    <h4
                      style={{
                        color: "#1890ff",
                        marginBottom: "16px",
                        fontSize: "16px",
                      }}
                    >
                      üí≥ Thanh to√°n & H√†nh ƒë·ªông
                    </h4>

                    {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
                    <div style={{ marginBottom: "20px" }}>
                      <div
                        style={{
                          display: "flex",
                          alignItems: "center",
                          gap: "12px",
                          marginBottom: "12px",
                        }}
                      >
                        {selectedOrder.paymentMethod === "COD" ? (
                          <>
                            <span style={{ fontSize: "18px" }}>üíµ</span>
                            <Text strong>Thanh to√°n khi nh·∫≠n h√†ng</Text>
                          </>
                        ) : selectedOrder.paymentMethod === "BANKING" ? (
                          <>
                            <span style={{ fontSize: "18px" }}>üè¶</span>
                            <div>
                              <Text strong style={{ display: "block" }}>
                                Chuy·ªÉn kho·∫£n ng√¢n h√†ng
                              </Text>
                              <Tag
                                color={
                                  selectedOrder.paymentStatus === "PAID"
                                    ? "success"
                                    : "error"
                                }
                                style={{ marginTop: "4px" }}
                              >
                                {selectedOrder.paymentStatus === "PAID"
                                  ? "‚úÖ ƒê√£ thanh to√°n"
                                  : "‚ùå Ch∆∞a thanh to√°n"}
                              </Tag>
                            </div>
                          </>
                        ) : (
                          <>
                            <span style={{ fontSize: "18px" }}>üí≥</span>
                            <Text type="secondary">Ch∆∞a c√≥ th√¥ng tin</Text>
                          </>
                        )}
                      </div>
                    </div>

                    {/* Action buttons */}
                    <div
                      style={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "8px",
                      }}
                    >
                      {selectedOrder.paymentMethod === "BANKING" &&
                        selectedOrder.paymentStatus !== "PAID" && (
                          <>
                            <Button
                              type="primary"
                              size="middle"
                              style={{
                                borderRadius: "8px",
                                backgroundColor: "#52c41a",
                                borderColor: "#52c41a",
                                fontWeight: "500",
                              }}
                              onClick={() => handlePayment(selectedOrder.id)}
                              block
                            >
                              üí≥ Thanh to√°n ngay
                            </Button>
                            <Button
                              type="default"
                              size="middle"
                              style={{ borderRadius: "8px", fontWeight: "500" }}
                              onClick={() =>
                                handleChangePaymentMethod(selectedOrder.id)
                              }
                              block
                            >
                              üîÑ Chuy·ªÉn sang COD
                            </Button>
                          </>
                        )}

                      {(selectedOrder.status === "PENDING" ||
                        selectedOrder.status === "UNPAID") && (
                        <Button
                          danger
                          size="middle"
                          style={{
                            borderRadius: "8px",
                            fontWeight: "500",
                            marginTop: "8px",
                          }}
                          onClick={() =>
                            handleShowCancelModal(selectedOrder.id)
                          }
                          block
                        >
                          ‚ùå H·ªßy ƒë∆°n h√†ng
                        </Button>
                      )}
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* Danh s√°ch s·∫£n ph·∫©m */}
            <div style={{ marginBottom: "24px" }}>
              <h4
                style={{
                  color: "#1890ff",
                  marginBottom: "16px",
                  fontSize: "16px",
                }}
              >
                üõçÔ∏è S·∫£n ph·∫©m ƒë√£ ƒë·∫∑t ({selectedOrder.orderItems.length} s·∫£n ph·∫©m)
              </h4>
              <div
                style={{
                  background: "#fff",
                  borderRadius: "12px",
                  border: "1px solid #e8e8e8",
                  overflow: "hidden",
                  boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
                }}
              >
                {selectedOrder.orderItems.map((item, index) => (
                  <div
                    key={index}
                    style={{
                      padding: "20px",
                      borderBottom:
                        index < selectedOrder.orderItems.length - 1
                          ? "1px solid #f0f0f0"
                          : "none",
                      display: "flex",
                      alignItems: "center",
                      gap: "16px",
                      transition: "background-color 0.3s",
                    }}
                  >
                    <img
                      src={item.productImage}
                      alt={item.productName}
                      style={{
                        width: "80px",
                        height: "80px",
                        objectFit: "cover",
                        borderRadius: "8px",
                        border: "1px solid #e8e8e8",
                      }}
                    />
                    <div style={{ flex: 1 }}>
                      <Text
                        strong
                        style={{
                          fontSize: "16px",
                          display: "block",
                          marginBottom: "8px",
                        }}
                      >
                        {item.productName}
                      </Text>
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <div>
                          <Text type="secondary" style={{ fontSize: "14px" }}>
                            {item.price.toLocaleString("vi-VN")} ‚Ç´
                          </Text>
                          <Text type="secondary" style={{ margin: "0 8px" }}>
                            √ó
                          </Text>
                          <Text style={{ fontSize: "14px" }}>
                            {item.quantity}
                          </Text>
                        </div>
                        <Text
                          strong
                          style={{ color: "#1890ff", fontSize: "16px" }}
                        >
                          {(item.price * item.quantity).toLocaleString("vi-VN")}{" "}
                          ‚Ç´
                        </Text>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* T√≥m t·∫Øt ƒë∆°n h√†ng */}
            <div
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                padding: "24px",
                borderRadius: "12px",
                color: "white",
                textAlign: "center",
              }}
            >
              <h4
                style={{
                  color: "white",
                  marginBottom: "16px",
                  fontSize: "18px",
                }}
              >
                üí∞ T·ªïng thanh to√°n
              </h4>
              <div style={{ fontSize: "32px", fontWeight: "bold" }}>
                {selectedOrder.totalAmount.toLocaleString("vi-VN")} ‚Ç´
              </div>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal ch·ªçn l√Ω do h·ªßy ƒë∆°n h√†ng */}
      <Modal
        title={
          <div style={{ textAlign: "center" }}>
            <h3 style={{ margin: 0, color: "#ff4d4f", fontSize: "18px" }}>
              ‚ùå H·ªßy ƒë∆°n h√†ng #{selectedOrder?.id}
            </h3>
            <Text type="secondary" style={{ fontSize: "14px" }}>
              Vui l√≤ng cho ch√∫ng t√¥i bi·∫øt l√Ω do h·ªßy ƒë∆°n h√†ng
            </Text>
          </div>
        }
        open={isCancelModalVisible}
        onCancel={handleCloseCancelModal}
        width={500}
        centered
        footer={[
          <Button key="cancel" onClick={handleCloseCancelModal}>
            Quay l·∫°i
          </Button>,
          <Button
            key="confirm"
            type="primary"
            danger
            onClick={handleConfirmCancel}
            disabled={
              !selectedCancelReason ||
              (selectedCancelReason === "other" && !customCancelReason.trim())
            }
          >
            X√°c nh·∫≠n h·ªßy
          </Button>,
        ]}
      >
        <div style={{ padding: "16px 0" }}>
          <Radio.Group
            value={selectedCancelReason}
            onChange={(e) => setSelectedCancelReason(e.target.value)}
            style={{ width: "100%" }}
          >
            <div
              style={{ display: "flex", flexDirection: "column", gap: "12px" }}
            >
              {cancelReasons.map((reason) => (
                <Radio
                  key={reason.value}
                  value={reason.value}
                  style={{
                    padding: "12px",
                    border:
                      selectedCancelReason === reason.value
                        ? "2px solid #1890ff"
                        : "1px solid #d9d9d9",
                    borderRadius: "8px",
                    backgroundColor:
                      selectedCancelReason === reason.value
                        ? "#f6ffed"
                        : "#fff",
                    transition: "all 0.3s",
                  }}
                >
                  <span style={{ fontSize: "14px", fontWeight: "500" }}>
                    {reason.label}
                  </span>
                </Radio>
              ))}
            </div>
          </Radio.Group>

          {/* √î nh·∫≠p l√Ω do kh√°c */}
          {selectedCancelReason === "other" && (
            <div style={{ marginTop: "16px" }}>
              <Text strong style={{ display: "block", marginBottom: "8px" }}>
                Vui l√≤ng nh·∫≠p l√Ω do c·ª• th·ªÉ:
              </Text>
              <Input.TextArea
                value={customCancelReason}
                onChange={(e) => setCustomCancelReason(e.target.value)}
                placeholder="Nh·∫≠p l√Ω do h·ªßy ƒë∆°n h√†ng..."
                rows={3}
                maxLength={500}
                showCount
                style={{ borderRadius: "8px" }}
              />
            </div>
          )}

          {/* Th√¥ng b√°o l∆∞u √Ω */}
          <div
            style={{
              marginTop: "20px",
              padding: "12px",
              backgroundColor: "#fff2e8",
              borderRadius: "8px",
              border: "1px solid #ffb366",
            }}
          >
            <Text type="warning" style={{ fontSize: "13px" }}>
              <span style={{ marginRight: "8px" }}>‚ö†Ô∏è</span>
              L∆∞u √Ω: ƒê∆°n h√†ng ƒë√£ h·ªßy kh√¥ng th·ªÉ kh√¥i ph·ª•c. N·∫øu b·∫°n mu·ªën mua l·∫°i,
              vui l√≤ng ƒë·∫∑t ƒë∆°n h√†ng m·ªõi.
            </Text>
          </div>
        </div>
      </Modal>
    </div>
  );
};

// Component qu·∫£n l√Ω ƒë·ªãa ch·ªâ giao h√†ng
const AddressesTab = () => {
  const [addresses, setAddresses] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);
  const [form] = Form.useForm();
  const [notification, setNotification] = useState({
    type: "",
    message: "",
    visible: false,
  });

  const showNotification = (type, message) => {
    setNotification({ type, message, visible: true });
    // T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
    setTimeout(() => {
      setNotification({ type: "", message: "", visible: false });
    }, 3000);
  };

  useEffect(() => {
    loadAddresses();
  }, []);

  const loadAddresses = async () => {
    try {
      const resGetAddresses = await getAddresses();

      setAddresses(resGetAddresses.data.addresses || []);
    } catch (error) {
      console.error("Error loading addresses:", error);
      setAddresses([]);
    }
  };

  const saveAddresses = (newAddresses) => {
    try {
      localStorage.setItem("userAddresses", JSON.stringify(newAddresses));
      setAddresses(newAddresses);
    } catch (error) {
      console.error("Error saving addresses:", error);
    }
  };

  const handleAddAddress = () => {
    setEditingAddress(null);
    form.resetFields();
    setIsModalVisible(true);
  };

  const handleEditAddress = (address) => {
    setEditingAddress(address);
    form.setFieldsValue(address);
    setIsModalVisible(true);
  };

  const handleDeleteAddress = async (addressId) => {
    const resDeleteAddress = await deleteAddress(addressId);
    if (resDeleteAddress.status === "success") {
      showNotification("success", "X√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
      loadAddresses();
    } else {
      showNotification("error", "L·ªói khi x√≥a ƒë·ªãa ch·ªâ!");
    }
  };

  const handleSetDefault = (addressId) => {
    const newAddresses = addresses.map((addr) => ({
      ...addr,
      isDefault: addr.id === addressId,
    }));
    saveAddresses(newAddresses);
    message.success("ƒê√£ ƒë·∫∑t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh!");
  };

  const handleSubmitAddress = async (values) => {
    try {
      if (editingAddress) {
        const resUpdateAddress = await updateAddress(
          editingAddress.id,
          values.street,
          values.ward,
          values.district,
          values.city,
          values.note
        );
        if (resUpdateAddress && resUpdateAddress.data) {
          setIsModalVisible(false);
          showNotification("success", "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
          loadAddresses();
        } else {
          showNotification("error", "L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ!");
        }
      } else {
        const resAddAddress = await addAddress(
          values.street,
          values.ward,
          values.district,
          values.city,
          values.note
        );
        if (resAddAddress && resAddAddress.data) {
          setIsModalVisible(false);
          showNotification("success", "Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
          loadAddresses();
        }
      }
    } catch (error) {
      console.error("Error saving address:", error);
      showNotification("error", "C√≥ l·ªói khi l∆∞u ƒë·ªãa ch·ªâ!");
    }
  };

  // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa ƒë·ªãa ch·ªâ t·ª´ Profile
  useEffect(() => {
    const handleAddressesUpdated = () => {
      console.log("AddressesUpdated event received, reloading addresses...");
      loadAddresses();
    };

    window.addEventListener("addressesUpdated", handleAddressesUpdated);
    return () =>
      window.removeEventListener("addressesUpdated", handleAddressesUpdated);
  }, []);

  return (
    <div>
      {/* Notification System */}
      {notification.visible && (
        <div
          className={`notification ${notification.type}`}
          style={{
            position: "fixed",
            top: "20px",
            right: "20px",
            padding: "16px 24px",
            borderRadius: "8px",
            color: "white",
            fontWeight: "bold",
            zIndex: 9999,
            boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
            backgroundColor:
              notification.type === "success"
                ? "#52c41a"
                : notification.type === "error"
                ? "#ff4d4f"
                : "#1890ff",
          }}
        >
          {notification.message}
        </div>
      )}
      <div style={{ marginBottom: 24 }}>
        <Title level={4} style={{ marginBottom: 16 }}>
          Qu·∫£n l√Ω ƒë·ªãa ch·ªâ giao h√†ng
        </Title>
        <p style={{ color: "#666", marginBottom: 16 }}>
          Qu·∫£n l√Ω c√°c ƒë·ªãa ch·ªâ giao h√†ng c·ªßa b·∫°n. ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh s·∫Ω ƒë∆∞·ª£c t·ª±
          ƒë·ªông ch·ªçn khi ƒë·∫∑t h√†ng.
        </p>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={handleAddAddress}
          style={{ marginBottom: 16 }}
        >
          Th√™m ƒë·ªãa ch·ªâ m·ªõi
        </Button>
      </div>

      {addresses.length === 0 ? (
        <div style={{ textAlign: "center", padding: "40px 20px" }}>
          <EnvironmentOutlined
            style={{ fontSize: 48, color: "#d9d9d9", marginBottom: 16 }}
          />
          <br />
          <Text type="secondary">B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o</Text>
          <br />
          <Button type="link" onClick={handleAddAddress}>
            Th√™m ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n
          </Button>
        </div>
      ) : (
        <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>
          {addresses.map((address) => (
            <Card
              key={address.id}
              style={{
                border: address.isDefault
                  ? "2px solid #52c41a"
                  : "1px solid #d9d9d9",
                borderRadius: 8,
              }}
              bodyStyle={{ padding: 16 }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "flex-start",
                }}
              >
                <div style={{ flex: 1 }}>
                  <div
                    style={{
                      display: "flex",
                      alignItems: "center",
                      marginBottom: 8,
                    }}
                  >
                    <Text strong style={{ fontSize: 16, marginRight: 16 }}>
                      {address.fullName}
                    </Text>
                    <Text type="secondary">{address.phone}</Text>
                    {address.isDefault && (
                      <Tag color="success" style={{ marginLeft: 12 }}>
                        M·∫∑c ƒë·ªãnh
                      </Tag>
                    )}
                  </div>

                  <div style={{ marginBottom: 8 }}>
                    <Text>{address.street}</Text>
                    <br />
                    <Text type="secondary">
                      {address.ward}, {address.district}, {address.city}
                    </Text>
                  </div>

                  {address.note && (
                    <Text type="secondary" style={{ fontStyle: "italic" }}>
                      Ghi ch√∫: {address.note}
                    </Text>
                  )}
                </div>

                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: 8,
                    marginLeft: 16,
                  }}
                >
                  {/* {!address.isDefault && (
                                        <Button
                                            size="small"
                                            onClick={() => handleSetDefault(address.id)}
                                        >
                                            ƒê·∫∑t m·∫∑c ƒë·ªãnh
                                        </Button>
                                    )} */}
                  <Button
                    size="small"
                    onClick={() => handleEditAddress(address)}
                  >
                    Ch·ªânh s·ª≠a
                  </Button>
                  <Popconfirm
                    title="X√≥a ƒë·ªãa ch·ªâ"
                    description="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªãa ch·ªâ giao h√†ng n√†y kh√¥ng?"
                    onConfirm={() => handleDeleteAddress(address.id)}
                    okText="C√≥"
                    cancelText="Kh√¥ng"
                    okButtonProps={{ danger: true }}
                  >
                    <Button size="small" danger>
                      X√≥a
                    </Button>
                  </Popconfirm>
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}

      <Modal
        title={editingAddress ? "Ch·ªânh s·ª≠a ƒë·ªãa ch·ªâ" : "Th√™m ƒë·ªãa ch·ªâ m·ªõi"}
        open={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form form={form} layout="vertical" onFinish={handleSubmitAddress}>
          <Form.Item
            name="street"
            label="S·ªë nh√†, t√™n ƒë∆∞·ªùng"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}
          >
            <Input placeholder="V√≠ d·ª•: 123 Nguy·ªÖn VƒÉn Linh" />
          </Form.Item>

          <div style={{ display: "flex", gap: 16 }}>
            <Form.Item
              name="ward"
              label="Ph∆∞·ªùng/X√£"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ph∆∞·ªùng/x√£!" }]}
              style={{ flex: 1 }}
            >
              <Input placeholder="V√≠ d·ª•: Ph∆∞·ªùng 7" />
            </Form.Item>
            <Form.Item
              name="district"
              label="Qu·∫≠n/Huy·ªán"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p qu·∫≠n/huy·ªán!" }]}
              style={{ flex: 1 }}
            >
              <Input placeholder="V√≠ d·ª•: Qu·∫≠n 8" />
            </Form.Item>
          </div>

          <Form.Item
            name="city"
            label="T·ªânh/Th√†nh ph·ªë"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t·ªânh/th√†nh ph·ªë!" },
            ]}
          >
            <Input placeholder="V√≠ d·ª•: TP. H·ªì Ch√≠ Minh" />
          </Form.Item>

          <Form.Item name="note" label="Ghi ch√∫ (kh√¥ng b·∫Øt bu·ªôc)">
            <Input.TextArea
              placeholder="V√≠ d·ª•: ƒê·ªãa ch·ªâ nh√† ri√™ng, c√¥ng ty..."
              rows={2}
            />
          </Form.Item>

          <Form.Item>
            <div
              style={{ display: "flex", gap: 12, justifyContent: "flex-end" }}
            >
              <Button onClick={() => setIsModalVisible(false)}>H·ªßy</Button>
              <Button type="primary" htmlType="submit">
                {editingAddress ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
              </Button>
            </div>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

const ProfilePage = () => {
  const [form] = Form.useForm();
  const [passwordForm] = Form.useForm();
  const [profile, setProfile] = useState(defaultProfile);
  const { user, setUser, fetchUserInfor } = useContext(AuthContext);
  const [avatarUrl, setAvatarUrl] = useState(user?.avatarUrl || null);
  const [file, setFile] = useState(null); 
  const [previewUrl, setPreviewUrl] = useState(""); 
  
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const [notification, setNotification] = useState({
    type: "",
    message: "",
    visible: false,
  });
  const [activeTab, setActiveTab] = useState("info");


  // H√†m hi·ªÉn th·ªã th√¥ng b√°o
  const showNotification = (type, message) => {
    setNotification({ type, message, visible: true });
    // T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
    setTimeout(() => {
      setNotification({ type: "", message: "", visible: false });
    }, 3000);
  };

  useEffect(() => {
    try {
      // ƒê·ªçc th√¥ng tin t·ª´ authUser (ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p)
      const authUser = localStorage.getItem("access_token");
      if (authUser) {
        const userData = user;
        // C·∫≠p nh·∫≠t profile state v·ªõi th√¥ng tin ng∆∞·ªùi d√πng
        const userProfile = {
          username: userData.username || "",
          email: userData.email || "",
          phone: userData.phone || "",
          avatar: userData.avatarUrl || "",
        };

        setProfile(userProfile);
        form.setFieldsValue(userProfile);

        setAvatarUrl(userData.avatarUrl || "");
      } else {
        console.log("No authUser found, user not logged in");
      }
    } catch (e) {
      console.error("Error loading user profile:", e);
    }
  }, [user, form]);

  // Function ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng chuy·ªÉn tab
  const handleTabChange = (activeKey) => {
    setActiveTab(activeKey);
  };

  // H√†m x·ª≠ l√Ω upload t√πy ch·ªânh
  const customRequest = ({ file, onSuccess, onError }) => {
    const url = URL.createObjectURL(file); 
    setAvatarUrl(url); 
    setFile(file); 
    setPreviewUrl(""); 
    onSuccess();
  };

  // Khi ch·ªçn file
  const handleAvatarChange = (info) => {
    if (info.file.status === "done") {
      message.success(`${info.file.name} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!`);
    } else if (info.file.status === "error") {
      message.error(`${info.file.name} t·∫£i l√™n th·∫•t b·∫°i!`);
    }
  };

  // X·ª≠ l√Ω l∆∞u ·∫£nh
  const handleSave = async () => {
    if (!file) {
      alert("Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc khi l∆∞u!");
      return;
    }

    setLoading(true);
    try {
      const resUpdateAvatar = await updateAvatarAPI(file);
      if(resUpdateAvatar.status === "success") {
        // setUser(resUpdateAvatar.data.user); 
        setAvatarUrl(resUpdateAvatar.data.user.avatarUrl); 
        showNotification("success", "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!");
        setFile(null);
        await fetchUserInfor();
      } else {
        showNotification("error", resUpdateAvatar.message || "L·ªói khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán!");
      }   
    } catch (error) {
      showNotification("error", "L·ªói khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán!");
      setAvatarUrl(user.avatarUrl || null);
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω h·ªßy b·ªè
  const handleCancel = () => {
    setFile(null);
    setAvatarUrl(user.avatarUrl || null); 
    setPreviewUrl("");
    message.info("H·ªßy b·ªè thay ƒë·ªïi ·∫£nh!");
  };

  const onSaveProfile = async (value) => {
    try {
      const resUpdateInfo = await updateInFo(value.username, value.phone);
      if (resUpdateInfo.status === "success") {
        showNotification("success", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
        await fetchUserInfor();
      } else {
        showNotification("error", resUpdateInfo.message || "L·ªói khi c·∫≠p nh·∫≠t");
      }
    } catch (error) {
      showNotification("error", "L·ªói khi c·∫≠p nh·∫≠t");
    }
  };

  const onChangePassword = async (values) => {
    try {
      const resChangePassword = await changePasswordAPI(
        values.currentPassword,
        values.newPassword
      );
      console.log("Change password response:", resChangePassword);

      if (resChangePassword.status === "success") {
        passwordForm.resetFields();
        showNotification("success", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        setTimeout(() => {
          // ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
          localStorage.removeItem("access_token");
          localStorage.removeItem("role");
          navigate("/login");
        }, 1000);
      } else {
        showNotification(
          "error",
          resChangePassword.message || "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u"
        );
      }
    } catch (e) {
      console.error("Error in change password:", e);
      showNotification("error", "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u");
    }
  };

  return (
    <div className="profile-page">
      {/* Notification System */}
      {notification.visible && (
        <div
          className={`notification ${notification.type}`}
          style={{
            position: "fixed",
            top: "20px",
            right: "20px",
            padding: "16px 24px",
            borderRadius: "8px",
            color: "white",
            fontWeight: "bold",
            zIndex: 9999,
            boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
            backgroundColor:
              notification.type === "success"
                ? "#52c41a"
                : notification.type === "error"
                ? "#ff4d4f"
                : "#1890ff",
          }}
        >
          {notification.message}
        </div>
      )}
      <div className="container">
        <h1>H·ªì s∆° c·ªßa t√¥i</h1>

        {/* Notification System */}
        {notification.visible && (
          <div
            className={`notification ${notification.type}`}
            style={{
              position: "fixed",
              top: "20px",
              right: "20px",
              padding: "16px 24px",
              borderRadius: "8px",
              color: "white",
              fontWeight: "bold",
              zIndex: 9999,
              boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
              backgroundColor:
                notification.type === "success"
                  ? "#52c41a"
                  : notification.type === "error"
                  ? "#ff4d4f"
                  : "#1890ff",
            }}
          >
            {notification.message}
          </div>
        )}

        <Tabs
          activeKey={activeTab}
          onChange={handleTabChange}
          items={[
            {
              key: "info",
              label: "Th√¥ng tin c√° nh√¢n",
              children: (
                <Form
                  form={form}
                  layout="vertical"
                  onFinish={onSaveProfile}
                  // onFinishFailed={onSaveProfileFailed}
                  validateTrigger="onBlur"
                >
                  <div
                    style={{
                      display: "flex",
                      gap: 24,
                      alignItems: "flex-start",
                      flexWrap: "wrap",
                    }}
                  >
                    <div style={{ minWidth: 200, textAlign: "center" }}>
                      <Avatar
                        size={120}
                        src={avatarUrl}
                        style={{ marginBottom: 12 }}
                      />
                      <Form.Item
                        // label="·∫¢nh ƒë·∫°i di·ªán"
                        style={{ marginBottom: 0 }}
                      >
                        <div>
                          <Upload
                            name="avatar"
                            showUploadList={false}
                            customRequest={customRequest}
                            onChange={handleAvatarChange}
                            className="avatar-uploader"
                          >
                            <Button icon={<UploadOutlined />} size="small">
                              Thay ƒë·ªïi ·∫£nh
                            </Button>
                          </Upload>
                          {file && (
                            <div style={{ marginTop: "10px" }}>
                              <Button
                                type="primary"
                                onClick={handleSave}
                                loading={loading}
                                style={{ marginRight: "10px" }}
                              >
                                L∆∞u
                              </Button>
                              <Button onClick={handleCancel} disabled={loading}>
                                H·ªßy b·ªè
                              </Button>
                            </div>
                          )}
                        </div>
                      </Form.Item>
                    </div>

                    <div style={{ flex: 1, minWidth: 280 }}>
                      <Form.Item
                        name="username"
                        label="H·ªç v√† t√™n"
                        rules={[
                          { required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n" },
                        ]}
                      >
                        <Input placeholder="Nh·∫≠p h·ªç t√™n" />
                      </Form.Item>
                      <Form.Item
                        name="email"
                        label="Email"
                        rules={[
                          { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
                        ]}
                      >
                        <Input placeholder="Nh·∫≠p email" readOnly />
                      </Form.Item>
                      <Form.Item name="phone" label="S·ªë ƒëi·ªán tho·∫°i">
                        <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                      </Form.Item>

                      <Form.Item>
                        <Button
                          type="primary"
                          htmlType="submit"
                          className="profile-save-btn"
                        >
                          L∆∞u thay ƒë·ªïi
                        </Button>
                      </Form.Item>
                    </div>
                  </div>
                </Form>
              ),
            },
            {
              key: "password",
              label: "ƒê·ªïi m·∫≠t kh·∫©u",
              children: (
                <Form
                  form={passwordForm}
                  layout="vertical"
                  onFinish={onChangePassword}
                  style={{ maxWidth: 420 }}
                >
                  <Form.Item
                    name="currentPassword"
                    label="M·∫≠t kh·∫©u hi·ªán t·∫°i"
                    rules={[
                      { required: true, message: "Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i" },
                    ]}
                  >
                    <Input.Password />
                  </Form.Item>
                  <Form.Item
                    name="newPassword"
                    label="M·∫≠t kh·∫©u m·ªõi"
                    rules={[
                      { required: true, message: "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi" },
                      { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" },
                    ]}
                  >
                    <Input.Password />
                  </Form.Item>
                  <Form.Item
                    name="confirmPassword"
                    dependencies={["newPassword"]}
                    label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u!",
                      },
                      ({ getFieldValue }) => ({
                        validator(_, value) {
                          if (
                            !value ||
                            getFieldValue("newPassword") === value
                          ) {
                            return Promise.resolve();
                          }
                          return Promise.reject(
                            new Error("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!")
                          );
                        },
                      }),
                    ]}
                  >
                    <Input.Password />
                  </Form.Item>
                  <Form.Item>
                    <Button type="primary" htmlType="submit">
                      ƒê·ªïi m·∫≠t kh·∫©u
                    </Button>
                  </Form.Item>
                </Form>
              ),
            },
            {
              key: "orders",
              label: "ƒê∆°n h√†ng c·ªßa t√¥i",
              children: <OrdersTab />,
            },
            {
              key: "addresses",
              label: "ƒê·ªãa ch·ªâ giao h√†ng",
              children: <AddressesTab />,
            },
          ]}
        />
      </div>
    </div>
  );
};

export default ProfilePage;
